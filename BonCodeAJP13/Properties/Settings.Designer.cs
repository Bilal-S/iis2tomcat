//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.235
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BonCodeAJP13.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "10.0.0.0")]
    public sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        /// <summary>
        /// port on which the AJP13 worker is active. Check your worker.properties files on tomcat.
        /// </summary>
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("port on which the AJP13 worker is active. Check your worker.properties files on t" +
            "omcat.")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("8009")]
        public int Port {
            get {
                return ((int)(this["Port"]));
            }
        }
        
        /// <summary>
        /// target server hosting tomcat instance.
        /// </summary>
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Configuration.SettingsProviderAttribute(typeof(BonCodeAJP13.Config.BonCodeAJP13SettingProvider))]
        [global::System.Configuration.SettingsDescriptionAttribute("target server hosting tomcat instance.")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("localhost")]
        public string Server {
            get {
                return ((string)(this["Server"]));
            }
        }
        
        /// <summary>
        /// Maximum number of concurrent connections.
        /// </summary>
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Configuration.SettingsProviderAttribute(typeof(BonCodeAJP13.Config.BonCodeAJP13SettingProvider))]
        [global::System.Configuration.SettingsDescriptionAttribute("Maximum number of concurrent connections.")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("200")]
        public int MaxConnections {
            get {
                return ((int)(this["MaxConnections"]));
            }
        }
        
        /// <summary>
        /// determine whether we should attempt to detect http flushes. Set in tick counts. Set to zero to turn off.
        /// </summary>
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Configuration.SettingsProviderAttribute(typeof(BonCodeAJP13.Config.BonCodeAJP13SettingProvider))]
        [global::System.Configuration.SettingsDescriptionAttribute("determine whether we should attempt to detect http flushes. Set in tick counts. S" +
            "et to zero to turn off.")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0")]
        public int FlushThreshold {
            get {
                return ((int)(this["FlushThreshold"]));
            }
        }
        
        /// <summary>
        /// 0=turn off logging, 1=log errors, 2=log headers, 3=log packets (full debug)
        /// </summary>
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Configuration.SettingsProviderAttribute(typeof(BonCodeAJP13.Config.BonCodeAJP13SettingProvider))]
        [global::System.Configuration.SettingsDescriptionAttribute("0=turn off logging, 1=log errors, 2=log headers, 3=log packets (full debug)")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0")]
        public int LogLevel {
            get {
                return ((int)(this["LogLevel"]));
            }
        }
        
        /// <summary>
        /// Log Directory to use. If not provided the internet cache directory will be used for logging.
        /// </summary>
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Configuration.SettingsProviderAttribute(typeof(BonCodeAJP13.Config.BonCodeAJP13SettingProvider))]
        [global::System.Configuration.SettingsDescriptionAttribute("Log Directory to use. If not provided the internet cache directory will be used f" +
            "or logging.")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string LogDir {
            get {
                return ((string)(this["LogDir"]));
            }
        }
        
        /// <summary>
        /// When remote admin is enabled users can access administrative pages via this connector
        /// </summary>
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Configuration.SettingsProviderAttribute(typeof(BonCodeAJP13.Config.BonCodeAJP13SettingProvider))]
        [global::System.Configuration.SettingsDescriptionAttribute("When remote admin is enabled users can access administrative pages via this conne" +
            "ctor")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool EnableRemoteAdmin {
            get {
                return ((bool)(this["EnableRemoteAdmin"]));
            }
        }
        
        /// <summary>
        /// Should the connector compress content to client if client indicated that compressed streams can be handled.
        /// </summary>
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Configuration.SettingsProviderAttribute(typeof(BonCodeAJP13.Config.BonCodeAJP13SettingProvider))]
        [global::System.Configuration.SettingsDescriptionAttribute("Should the connector compress content to client if client indicated that compress" +
            "ed streams can be handled.")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool AutoCompression {
            get {
                return ((bool)(this["AutoCompression"]));
            }
        }
    }
}
